
* D@X:
** DONE Support projects with files on different file systems
   Depending on storage criteria, an entire project may not be hosted
   on a single file systems accessible by nodes in a cluster. The
   solution is to abstract over file locations. This is accomplished
   by a Location base class that supports multiple protocols for
   resolving a file to the local machine. In the case of a local file,
   the resolution is trivial. However, if the file is on a different
   machine, there may be different ways to do so.

   One protocol currently supported is the use of Chirp. By running a
   Chirp server on myhost.domain one could add the file to the current project like so

   #+BEGIN_SRC python
   ## contains paths to project data
   mylisting = 'datalist.dat'
   locations = dax.Location.from_file(mylisting)

   idnum = 42
   project = dax.Project('prefix', 'group', 'platform', idnum)
   project.load_locations(dax.read_cannonical, locations)
   #+END_SRC

   Furthermore, Location objects implement the __enter__ and __exit__
   methods allowing the use of with-statements to fetch the remote
   file and automatically clean up:

   #+BEGIN_SRC python
   url = 'chirp://myhost.domain:port/path/to/RUNXXXX/CLONEYYYY/GENZZZZ'
   with dax.Location.location(url) as name:
       print 'Remote file', url, 'resolved to local', name
   #+END_SRC


* M@X:
** DONE Transfer further arguments to gmx
	Use the [[https://github.com/badi/curry][curry]] module to partially apply functions that can still be pickled.

	Example:

    #+BEGIN_SRC python
    import dax, max, rax, gmx, curry

    daxproj     = dax.Project()
    raxproj     = rax.Project()

    pdb         = 'protein.pdb'
    ndx         = 'system.ndx'
    func        = curry.curry(gmx.g_rms, s=pdb, n=ndx)
    data        = daxproj.get_files('*.xtc', files=True)
    mapper      = max.Mapper(func)
    mapper.process(data, raxproj)

    raxproj.write()
	#+END_SRC

* GMX
** DONE Provide functions that abstract can be curried with arguements before passing to a M@X Mapper.
